{"version":3,"sources":["Components/Voting.js","App.js","serviceWorker.js","index.js"],"names":["App1","props","handleIncrement","setState","count","state","handleChanges","count2","handleNew","count3","handleNumChanges","count4","bind","className","this","onClick","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gPAkEeA,E,YAhEX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAWdC,gBAAkB,WACd,EAAKC,SAAS,CACVC,MAAO,EAAKC,MAAMD,MAAQ,KAdX,EAkBvBE,cAAgB,WACZ,EAAKH,SAAS,CACVI,OAAQ,EAAKF,MAAME,OAAS,KApBb,EAyBvBC,UAAW,WACP,EAAKL,SAAS,CACVM,OAAQ,EAAKJ,MAAMI,OAAS,KA3Bb,EA8BvBC,iBAAmB,WACf,EAAKP,SAAS,CACVQ,OAAQ,EAAKN,MAAMM,OAAS,KA9B5B,EAAKN,MAAQ,CACTD,MAAM,EACNG,OAAO,EACPE,OAAO,EACPE,OAAO,GAGV,EAAKT,gBAAkB,EAAKA,gBAAgBU,KAArB,gBATT,E,sEAsCf,OACI,6BACE,yBAAKC,UAAU,SACf,0CAAe,8BAAOC,KAAKT,MAAMM,SACjC,4BAAQI,QAASD,KAAKJ,kBAAtB,UAEA,6BACA,yBAAKG,UAAU,SACb,mCAAQ,8BAAOC,KAAKT,MAAMD,QAC1B,4BAAQW,QAASD,KAAKZ,iBAAtB,UAEF,6BACA,yBAAKW,UAAU,SACf,uCAAY,8BAAOC,KAAKT,MAAME,SAC9B,4BAAQQ,QAASD,KAAKR,eAAtB,UAEA,6BACA,yBAAKO,UAAU,SACf,qCAAU,8BAAOC,KAAKT,MAAMI,SAC5B,4BAAQM,QAASD,KAAKN,WAAtB,e,GA1DKQ,aCYJC,MATf,WACE,OACE,yBAAKJ,UAAU,OACf,8DACE,kBAAC,EAAD,QCIcK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.3f573d91.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nclass App1 extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { \r\n            count:1,\r\n            count2:2,\r\n            count3:0,\r\n            count4:0\r\n         }\r\n\r\n         this.handleIncrement = this.handleIncrement.bind(this)\r\n    }\r\n\r\nhandleIncrement = () =>{\r\n    this.setState({\r\n        count: this.state.count + 1\r\n    })\r\n}\r\n\r\nhandleChanges = () =>{\r\n    this.setState({\r\n        count2: this.state.count2 + 1\r\n    })\r\n}\r\n\r\n\r\nhandleNew= () =>{\r\n    this.setState({\r\n        count3: this.state.count3 + 1\r\n    })\r\n}\r\nhandleNumChanges = () =>{\r\n    this.setState({\r\n        count4: this.state.count4 + 1\r\n    })\r\n}\r\n\r\n\r\n    render() { \r\n        return ( \r\n            <div>\r\n              <div className=\"App_1\">\r\n              <h2>JavaScript <span>{this.state.count4}</span></h2>\r\n              <button onClick={this.handleNumChanges}>Click</button>\r\n              </div>\r\n              <br/>\r\n              <div className=\"App_1\">\r\n                <h2>PHP <span>{this.state.count}</span></h2>\r\n                <button onClick={this.handleIncrement}>Click</  button>\r\n              </div>\r\n              <br/>\r\n              <div className=\"App_1\">\r\n              <h2>Reactjs <span>{this.state.count2}</span></h2>\r\n              <button onClick={this.handleChanges}>Click</button>\r\n              </div>\r\n              <br/>\r\n              <div className=\"App_1\">\r\n              <h2>Vuejs <span>{this.state.count3}</span></h2>\r\n              <button onClick={this.handleNew}>Click</button>\r\n              </div>\r\n            </div>\r\n         );\r\n    }\r\n}\r\n \r\nexport default App1;","import React from 'react';\nimport './App.css';\nimport App1 from \"./Components/Voting\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    <h3>Vote for programming languages</h3>\n      <App1/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}